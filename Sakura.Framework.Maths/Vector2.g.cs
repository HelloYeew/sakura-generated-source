// <auto-generated>
// This code is generated by the Sakura framework source generator.
// Generator name : Sakura.Framework.SourceGenerators.Generators.MathStructGenerator
// Type wrapper for System.Numerics.Vector2 for Vector2
// </auto-generated>
namespace Sakura.Framework.Maths;

public readonly partial struct Vector2 : System.IEquatable<Vector2>
{
    /// <summary>Adds two vectors together.</summary>
    /// <param name="left">The first vector to add.</param>
    /// <param name="right">The second vector to add.</param>
    /// <returns>The summed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator +(Vector2 left, Vector2 right) => left + right;

    /// <summary>Divides the first vector by the second.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator /(Vector2 left, Vector2 right) => left / right;

    /// <summary>Divides the specified vector by a specified scalar value.</summary>
    /// <param name="value1">The vector.</param>
    /// <param name="value2">The scalar value.</param>
    /// <returns>The result of the division.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator /(Vector2 value1, float value2) => value1 / value2;

    /// <summary>Returns a value that indicates whether each pair of elements in two specified vectors is equal.</summary>
    /// <param name="left">The first vector to compare.</param>
    /// <param name="right">The second vector to compare.</param>
    /// <returns><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator ==(Vector2 left, Vector2 right) => left == right;

    /// <summary>Returns a value that indicates whether two specified vectors are not equal.</summary>
    /// <param name="left">The first vector to compare.</param>
    /// <param name="right">The second vector to compare.</param>
    /// <returns><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator !=(Vector2 left, Vector2 right) => left != right;

    /// <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The element-wise product vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(Vector2 left, Vector2 right) => left * right;

    /// <summary>Multiples the specified vector by the specified scalar value.</summary>
    /// <param name="left">The vector.</param>
    /// <param name="right">The scalar value.</param>
    /// <returns>The scaled vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(Vector2 left, float right) => left * right;

    /// <summary>Multiples the scalar value by the specified vector.</summary>
    /// <param name="left">The vector.</param>
    /// <param name="right">The scalar value.</param>
    /// <returns>The scaled vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(float left, Vector2 right) => left * right;

    /// <summary>Subtracts the second vector from the first.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator -(Vector2 left, Vector2 right) => left - right;

    /// <summary>Negates the specified vector.</summary>
    /// <param name="value">The vector to negate.</param>
    /// <returns>The negated vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator -(Vector2 value) => -value;

    /// <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
    /// <param name="value">A vector.</param>
    /// <returns>The absolute value vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Abs(Vector2 value) => System.Numerics.Vector2.Abs(value);

    /// <summary>Adds two vectors together.</summary>
    /// <param name="left">The first vector to add.</param>
    /// <param name="right">The second vector to add.</param>
    /// <returns>The summed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Add(Vector2 left, Vector2 right) => System.Numerics.Vector2.Add(left, right);

    /// <summary>Restricts a vector between a minimum and a maximum value.</summary>
    /// <param name="value1">The vector to restrict.</param>
    /// <param name="min">The minimum value.</param>
    /// <param name="max">The maximum value.</param>
    /// <returns>The restricted vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) => System.Numerics.Vector2.Clamp(value1, min, max);

    /// <summary>Restricts a vector between a minimum and a maximum value using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>..</summary>
    /// <param name="value1" />
    /// <param name="min">The minimum value.</param>
    /// <param name="max">The maximum value.</param>
    /// <returns>The restricted vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 ClampNative(Vector2 value1, Vector2 min, Vector2 max) => System.Numerics.Vector2.ClampNative(value1, min, max);

    /// <summary>Copies the per-element sign of a vector to the per-element sign of another vector.</summary>
    /// <param name="value">The vector whose magnitude is used in the result.</param>
    /// <param name="sign">The vector whose sign is used in the result.</param>
    /// <returns>A vector with the magnitude of <code data-dev-comment-type="paramref">value</code> and the sign of <code data-dev-comment-type="paramref">sign</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 CopySign(Vector2 value, Vector2 sign) => System.Numerics.Vector2.CopySign(value, sign);

    /// <summary>Creates a new <see cref="T:System.Numerics.Vector2" /> object whose two elements have the same value.</summary>
    /// <param name="value">The value to assign to all two elements.</param>
    /// <returns>A new <see cref="T:System.Numerics.Vector2" /> whose two elements have the same value.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(float value) => System.Numerics.Vector2.Create(value);

    /// <summary>Creates a vector whose elements have the specified values.</summary>
    /// <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector2.X" /> field.</param>
    /// <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector2.Y" /> field.</param>
    /// <returns>A new <see cref="T:System.Numerics.Vector2" /> whose elements have the specified values.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(float x, float y) => System.Numerics.Vector2.Create(x, y);

    /// <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 2 elements.</summary>
    /// <param name="values">The span of elements to assign to the vector.</param>
    /// <returns>A new <see cref="T:System.Numerics.Vector2" /> whose elements have the specified values.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(System.ReadOnlySpan<float> values) => System.Numerics.Vector2.Create(values);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Cos(Vector2 vector) => System.Numerics.Vector2.Cos(vector);

    /// <param name="degrees" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 DegreesToRadians(Vector2 degrees) => System.Numerics.Vector2.DegreesToRadians(degrees);

    /// <summary>Computes the Euclidean distance between the two given points.</summary>
    /// <param name="value1">The first point.</param>
    /// <param name="value2">The second point.</param>
    /// <returns>The distance.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float Distance(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Distance(value1, value2);

    /// <summary>Returns the Euclidean distance squared between two specified points.</summary>
    /// <param name="value1">The first point.</param>
    /// <param name="value2">The second point.</param>
    /// <returns>The distance squared.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float DistanceSquared(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.DistanceSquared(value1, value2);

    /// <summary>Divides the first vector by the second.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The vector resulting from the division.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Divide(Vector2 left, Vector2 right) => System.Numerics.Vector2.Divide(left, right);

    /// <summary>Divides the specified vector by a specified scalar value.</summary>
    /// <param name="left">The vector.</param>
    /// <param name="divisor">The scalar value.</param>
    /// <returns>The vector that results from the division.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Divide(Vector2 left, float divisor) => System.Numerics.Vector2.Divide(left, divisor);

    /// <summary>Returns the dot product of two vectors.</summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <returns>The dot product.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float Dot(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Dot(value1, value2);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Exp(Vector2 vector) => System.Numerics.Vector2.Exp(vector);

    /// <param name="left" />
    /// <param name="right" />
    /// <param name="addend" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 FusedMultiplyAdd(Vector2 left, Vector2 right, Vector2 addend) => System.Numerics.Vector2.FusedMultiplyAdd(left, right, addend);

    /// <param name="x" />
    /// <param name="y" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Hypot(Vector2 x, Vector2 y) => System.Numerics.Vector2.Hypot(x, y);

    /// <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <param name="amount">A value between 0 and 1 that indicates the weight of <code data-dev-comment-type="paramref">value2</code>.</param>
    /// <returns>The interpolated vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) => System.Numerics.Vector2.Lerp(value1, value2, amount);

    /// <param name="value1" />
    /// <param name="value2" />
    /// <param name="amount" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Lerp(Vector2 value1, Vector2 value2, Vector2 amount) => System.Numerics.Vector2.Lerp(value1, value2, amount);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Log(Vector2 vector) => System.Numerics.Vector2.Log(vector);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Log2(Vector2 vector) => System.Numerics.Vector2.Log2(vector);

    /// <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <returns>The maximized vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Max(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Max(value1, value2);

    /// <summary>Compares two vectors to compute which has the greater magnitude on a per-element basis.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxMagnitude(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxMagnitude(value1, value2);

    /// <summary>Compares two vectors, on a per-element basis, to compute which has the greater magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxMagnitudeNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxMagnitudeNumber(value1, value2);

    /// <summary>Compare two vectors to determine which is greater on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxNative(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxNative(value1, value2);

    /// <summary>Compares two vectors, on a per-element basis, to compute which is greater and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxNumber(value1, value2);

    /// <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <returns>The minimized vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Min(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Min(value1, value2);

    /// <summary>Compares two vectors to compute which has the lesser magnitude on a per-element basis.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinMagnitude(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinMagnitude(value1, value2);

    /// <summary>Compares two vectors, on a per-element basis, to compute which has the lesser magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinMagnitudeNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinMagnitudeNumber(value1, value2);

    /// <summary>Compare two vectors to determine which is lesser on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinNative(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinNative(value1, value2);

    /// <summary>Compares two vectors, on a per-element basis, to compute which is lesser and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
    /// <param name="value1" />
    /// <param name="value2" />
    /// <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinNumber(value1, value2);

    /// <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The element-wise product vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(Vector2 left, Vector2 right) => System.Numerics.Vector2.Multiply(left, right);

    /// <summary>Multiplies a vector by a specified scalar.</summary>
    /// <param name="left">The vector to multiply.</param>
    /// <param name="right">The scalar value.</param>
    /// <returns>The scaled vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(Vector2 left, float right) => System.Numerics.Vector2.Multiply(left, right);

    /// <summary>Multiplies a scalar value by a specified vector.</summary>
    /// <param name="left">The scaled value.</param>
    /// <param name="right">The vector.</param>
    /// <returns>The scaled vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(float left, Vector2 right) => System.Numerics.Vector2.Multiply(left, right);

    /// <param name="left" />
    /// <param name="right" />
    /// <param name="addend" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MultiplyAddEstimate(Vector2 left, Vector2 right, Vector2 addend) => System.Numerics.Vector2.MultiplyAddEstimate(left, right, addend);

    /// <summary>Negates a specified vector.</summary>
    /// <param name="value">The vector to negate.</param>
    /// <returns>The negated vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Negate(Vector2 value) => System.Numerics.Vector2.Negate(value);

    /// <summary>Returns a vector with the same direction as the specified vector, but with a length of one.</summary>
    /// <param name="value">The vector to normalize.</param>
    /// <returns>The normalized vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Normalize(Vector2 value) => System.Numerics.Vector2.Normalize(value);

    /// <param name="radians" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 RadiansToDegrees(Vector2 radians) => System.Numerics.Vector2.RadiansToDegrees(radians);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Round(Vector2 vector) => System.Numerics.Vector2.Round(vector);

    /// <param name="vector" />
    /// <param name="mode" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Round(Vector2 vector, System.MidpointRounding mode) => System.Numerics.Vector2.Round(vector, mode);

    /// <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
    /// <param name="vector">The source vector.</param>
    /// <param name="normal">The normal of the surface being reflected off.</param>
    /// <returns>The reflected vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Reflect(Vector2 vector, Vector2 normal) => System.Numerics.Vector2.Reflect(vector, normal);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Sin(Vector2 vector) => System.Numerics.Vector2.Sin(vector);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static (System.Numerics.Vector2 Sin, System.Numerics.Vector2 Cos) SinCos(Vector2 vector) => System.Numerics.Vector2.SinCos(vector);

    /// <summary>Returns a vector whose elements are the square root of each of a specified vector's elements.</summary>
    /// <param name="value">A vector.</param>
    /// <returns>The square root vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 SquareRoot(Vector2 value) => System.Numerics.Vector2.SquareRoot(value);

    /// <summary>Subtracts the second vector from the first.</summary>
    /// <param name="left">The first vector.</param>
    /// <param name="right">The second vector.</param>
    /// <returns>The difference vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Subtract(Vector2 left, Vector2 right) => System.Numerics.Vector2.Subtract(left, right);

    /// <summary>Transforms a vector by a specified 3x2 matrix.</summary>
    /// <param name="position">The vector to transform.</param>
    /// <param name="matrix">The transformation matrix.</param>
    /// <returns>The transformed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 position, System.Numerics.Matrix3x2 matrix) => System.Numerics.Vector2.Transform(position, matrix);

    /// <summary>Transforms a vector by a specified 4x4 matrix.</summary>
    /// <param name="position">The vector to transform.</param>
    /// <param name="matrix">The transformation matrix.</param>
    /// <returns>The transformed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 position, System.Numerics.Matrix4x4 matrix) => System.Numerics.Vector2.Transform(position, matrix);

    /// <summary>Transforms a vector by the specified Quaternion rotation value.</summary>
    /// <param name="value">The vector to rotate.</param>
    /// <param name="rotation">The rotation to apply.</param>
    /// <returns>The transformed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 value, System.Numerics.Quaternion rotation) => System.Numerics.Vector2.Transform(value, rotation);

    /// <summary>Transforms a vector normal by the given 3x2 matrix.</summary>
    /// <param name="normal">The source vector.</param>
    /// <param name="matrix">The matrix.</param>
    /// <returns>The transformed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 TransformNormal(Vector2 normal, System.Numerics.Matrix3x2 matrix) => System.Numerics.Vector2.TransformNormal(normal, matrix);

    /// <summary>Transforms a vector normal by the given 4x4 matrix.</summary>
    /// <param name="normal">The source vector.</param>
    /// <param name="matrix">The matrix.</param>
    /// <returns>The transformed vector.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 TransformNormal(Vector2 normal, System.Numerics.Matrix4x4 matrix) => System.Numerics.Vector2.TransformNormal(normal, matrix);

    /// <param name="vector" />
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Truncate(Vector2 vector) => System.Numerics.Vector2.Truncate(vector);

    /// <summary>Returns the length of the vector.</summary>
    /// <returns>The vector's length.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public float Length() => this.Value.Length();

    /// <summary>Returns the length of the vector squared.</summary>
    /// <returns>The vector's length squared.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public float LengthSquared() => this.Value.LengthSquared();

    /// <summary>Returns the string representation of the current instance using default formatting.</summary>
    /// <returns>The string representation of the current instance.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override string ToString() => this.Value.ToString();

    /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
    /// <param name="other">An object to compare with this object.</param>
    /// <returns><c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public bool Equals(Vector2 other) => this.Value.Equals(other.Value);

    /// <summary>Indicates whether this instance and a specified object are equal.</summary>
    /// <param name="obj">The object to compare with the current instance.</param>
    /// <returns><c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override bool Equals(object obj) => obj is Vector2 other && Equals(other);

    /// <summary>Returns the hash code for this instance.</summary>
    /// <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override int GetHashCode() => this.Value.GetHashCode();
}
