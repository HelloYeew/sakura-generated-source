// <auto-generated>
// This code is generated by the Sakura framework source generator.
// Generator name : Sakura.Framework.SourceGenerators.Generators.MathStructGenerator
// Type wrapper for System.Numerics.Vector2 for Vector2
// Last updated : 2025-09-05 19:58:46 UTC
// </auto-generated>
namespace Sakura.Framework.Maths;

public readonly partial struct Vector2 : System.IEquatable<Vector2>
{
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public Vector2(float value)
    {
        this.Value = new System.Numerics.Vector2(value);
    }

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public Vector2(float x, float y)
    {
        this.Value = new System.Numerics.Vector2(x, y);
    }

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public Vector2(System.ReadOnlySpan<float> values)
    {
        this.Value = new System.Numerics.Vector2(values);
    }

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator +(Vector2 left, Vector2 right) => left + right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator /(Vector2 left, Vector2 right) => left / right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator /(Vector2 value1, float value2) => value1 / value2;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator ==(Vector2 left, Vector2 right) => left == right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool operator !=(Vector2 left, Vector2 right) => left != right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(Vector2 left, Vector2 right) => left * right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(Vector2 left, float right) => left * right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator *(float left, Vector2 right) => left * right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator -(Vector2 left, Vector2 right) => left - right;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 operator -(Vector2 value) => -value;

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Abs(Vector2 value) => System.Numerics.Vector2.Abs(value);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Add(Vector2 left, Vector2 right) => System.Numerics.Vector2.Add(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) => System.Numerics.Vector2.Clamp(value1, min, max);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 ClampNative(Vector2 value1, Vector2 min, Vector2 max) => System.Numerics.Vector2.ClampNative(value1, min, max);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 CopySign(Vector2 value, Vector2 sign) => System.Numerics.Vector2.CopySign(value, sign);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(float value) => System.Numerics.Vector2.Create(value);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(float x, float y) => System.Numerics.Vector2.Create(x, y);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Create(System.ReadOnlySpan<float> values) => System.Numerics.Vector2.Create(values);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Cos(Vector2 vector) => System.Numerics.Vector2.Cos(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 DegreesToRadians(Vector2 degrees) => System.Numerics.Vector2.DegreesToRadians(degrees);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float Distance(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Distance(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float DistanceSquared(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.DistanceSquared(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Divide(Vector2 left, Vector2 right) => System.Numerics.Vector2.Divide(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Divide(Vector2 left, float divisor) => System.Numerics.Vector2.Divide(left, divisor);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static float Dot(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Dot(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Exp(Vector2 vector) => System.Numerics.Vector2.Exp(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 FusedMultiplyAdd(Vector2 left, Vector2 right, Vector2 addend) => System.Numerics.Vector2.FusedMultiplyAdd(left, right, addend);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Hypot(Vector2 x, Vector2 y) => System.Numerics.Vector2.Hypot(x, y);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) => System.Numerics.Vector2.Lerp(value1, value2, amount);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Lerp(Vector2 value1, Vector2 value2, Vector2 amount) => System.Numerics.Vector2.Lerp(value1, value2, amount);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Log(Vector2 vector) => System.Numerics.Vector2.Log(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Log2(Vector2 vector) => System.Numerics.Vector2.Log2(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Max(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Max(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxMagnitude(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxMagnitude(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxMagnitudeNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxMagnitudeNumber(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxNative(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxNative(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MaxNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MaxNumber(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Min(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.Min(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinMagnitude(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinMagnitude(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinMagnitudeNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinMagnitudeNumber(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinNative(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinNative(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MinNumber(Vector2 value1, Vector2 value2) => System.Numerics.Vector2.MinNumber(value1, value2);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(Vector2 left, Vector2 right) => System.Numerics.Vector2.Multiply(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(Vector2 left, float right) => System.Numerics.Vector2.Multiply(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Multiply(float left, Vector2 right) => System.Numerics.Vector2.Multiply(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 MultiplyAddEstimate(Vector2 left, Vector2 right, Vector2 addend) => System.Numerics.Vector2.MultiplyAddEstimate(left, right, addend);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Negate(Vector2 value) => System.Numerics.Vector2.Negate(value);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Normalize(Vector2 value) => System.Numerics.Vector2.Normalize(value);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 RadiansToDegrees(Vector2 radians) => System.Numerics.Vector2.RadiansToDegrees(radians);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Round(Vector2 vector) => System.Numerics.Vector2.Round(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Round(Vector2 vector, System.MidpointRounding mode) => System.Numerics.Vector2.Round(vector, mode);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Reflect(Vector2 vector, Vector2 normal) => System.Numerics.Vector2.Reflect(vector, normal);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Sin(Vector2 vector) => System.Numerics.Vector2.Sin(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static (System.Numerics.Vector2 Sin, System.Numerics.Vector2 Cos) SinCos(Vector2 vector) => System.Numerics.Vector2.SinCos(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 SquareRoot(Vector2 value) => System.Numerics.Vector2.SquareRoot(value);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Subtract(Vector2 left, Vector2 right) => System.Numerics.Vector2.Subtract(left, right);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 position, System.Numerics.Matrix3x2 matrix) => System.Numerics.Vector2.Transform(position, matrix);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 position, System.Numerics.Matrix4x4 matrix) => System.Numerics.Vector2.Transform(position, matrix);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Transform(Vector2 value, System.Numerics.Quaternion rotation) => System.Numerics.Vector2.Transform(value, rotation);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 TransformNormal(Vector2 normal, System.Numerics.Matrix3x2 matrix) => System.Numerics.Vector2.TransformNormal(normal, matrix);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 TransformNormal(Vector2 normal, System.Numerics.Matrix4x4 matrix) => System.Numerics.Vector2.TransformNormal(normal, matrix);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static Vector2 Truncate(Vector2 vector) => System.Numerics.Vector2.Truncate(vector);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public float Length() => this.Value.Length();

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public float LengthSquared() => this.Value.LengthSquared();

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override string ToString() => this.Value.ToString();

    /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
    /// <param name="other">An object to compare with this object.</param>
    /// <returns><c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public bool Equals(Vector2 other) => this.Value.Equals(other.Value);

    /// <summary>Indicates whether this instance and a specified object are equal.</summary>
    /// <param name="obj">The object to compare with the current instance.</param>
    /// <returns><c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override bool Equals(object obj) => obj is Vector2 other && Equals(other);

    /// <summary>Returns the hash code for this instance.</summary>
    /// <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public override int GetHashCode() => this.Value.GetHashCode();
}
